/* Generated by re2c 1.3 on Wed Jan 17 23:10:39 2024 */
#line 1 "hammer_map.y"
%language "c++"
%skeleton "lalr1.cc"

%debug
%no-lines
%define api.parser.class {HammerMapParser}
%define api.token.constructor
%define api.value.type variant
%define parse.assert
%define parse.error verbose
%locations   

%param { HammerMapParsingContext * ctx }//%param

%code
{

struct HammerMapParsingContext
{
    const char* cursor;
    yy::location loc;

    FGDEntityClass * current_entity = nullptr;
    FGDPropertyDescriptor* current_property = nullptr;

    GoldSource::HammerFGDFile * fgd;

    
    struct 
    {
        glm::vec3 color = { 1,1,1};
        glm::vec3 mins = {-4,-4,-4};
        glm::vec3 maxs = {4,4,4};

        glm::vec3 offset = {0,0,0};

        std::string model = "";
        std::string sprite = "";
        bool decal = false;
        std::string editorSprite = "";

        unsigned int flags = 0;
        
        std::list<std::string> baseClasses;

        void clear()
        {
            color = { 1,1,1};
            mins = {-4,-4,-4};
            maxs = {4,4,4};
            offset = {0,0,0};
            model = "";
            sprite = "";
            decal = false;
            editorSprite = "";
            flags = 0;
        }

    }entityCtorData;

    FGDParsingContext(GoldSource::HammerFGDFile * file)
    {
       fgd = file;
       cursor = file->Data();
    }



};

namespace yy { HammerFGDParser::symbol_type yylex(FGDParsingContext* ctx); }


void ParseFGD(GoldSource::HammerFGDFile * file)
{

    FGDParsingContext ctx(file);    

    auto fileName = file->FileName();

    ctx.loc.begin.filename = &fileName;
    ctx.loc.end.filename   = &fileName;

    yy::HammerFGDParser parser(&ctx);

    
    //parser.set_debug_level(999);

    parser.parse();  
}

}

%code requires
{

#include "..\application.h"
#include "..\common.h"
#include "..\hammer_fgd.h"

struct FGDParsingContext;
using namespace GoldSource;

}

%token	StringLiteral Identifier TextureName Number

%token	OpeningCurlyBracket "{"
%token	ClosingCurlyBracket "}"

%token	OpeningRoundBracket "("
%token	ClosingRoundBracket ")"

%token	OpeningSquareBracket "["
%token	ClosingSquareBracket "]"

%token  EndOfFile 0

%type<float>        Number
%type<std::string>  StringLiteral TextureName Identifier

%%

// Общее описание файла карты
Map: entitiesOpt;


// Описание всех энтитей - 0 или больше энтитей
entitiesOpt: entitiesOpt entityDef
|%empty;


// Описание энтити 
entityDef: OpeningCurlyBracket entityPropertiesOpt brushDefOpt ClosingCurlyBracket;


entityPropertiesOpt: entityPropertiesOpt entityProperty
|%empty;

entityProperty: StringLiteral StringLiteral

brushDefOpt: OpeningCurlyBracket brushFaceRecursive ClosingCurlyBracket
|%empty;

brushFaceRecursive: brushFaceRecursive brushFace
|%empty;

brushFace: PlanePoint PlanePoint PlanePoint TextureName TextureVector TextureVector Number Number Number;

PlanePoint: OpeningRoundBracket Number Number Number ClosingRoundBracket;
TextureVector: OpeningSquareBracket Number Number Number Number ClosingSquareBracket;

%%


yy::HammerMapParser::symbol_type yy::yylex(FGDParsingContext *  ctx)
{
    const char* anchor = ctx->cursor;
    ctx->loc.step();

    auto s = [&](auto func, auto&&... params) 
    { 
        ctx->loc.columns(ctx->cursor - anchor); 
        return func(params...,  ctx->loc); 
    };

    
#line 171 "<stdout>"
{
	char yych;
	yych = *ctx->cursor;
	switch (yych) {
	case 0x00:	goto yy3;
	case 0x08:
	case '\t':
	case '\v':
	case '\f':
	case ' ':	goto yy5;
	case '\n':	goto yy7;
	case '\r':	goto yy9;
	case '"':	goto yy10;
	case '(':	goto yy12;
	case ')':	goto yy14;
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy16;
	case '/':	goto yy19;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy20;
	case '[':	goto yy23;
	case ']':	goto yy25;
	default:	goto yy2;
	}
yy2:
yy3:
	++ctx->cursor;
#line 176 "hammer_map.y"
	{ return s(yy::HammerMapParser::make_EndOfFile); }
#line 261 "<stdout>"
yy5:
	++ctx->cursor;
#line 186 "hammer_map.y"
	{ ctx->loc.columns(); return yylex(ctx); }
#line 266 "<stdout>"
yy7:
	++ctx->cursor;
yy8:
#line 184 "hammer_map.y"
	{ ctx->loc.lines();   return yylex(ctx); }
#line 272 "<stdout>"
yy9:
	yych = *++ctx->cursor;
	switch (yych) {
	case '\n':	goto yy7;
	default:	goto yy8;
	}
yy10:
	yych = *++ctx->cursor;
	switch (yych) {
	case '"':	goto yy27;
	default:	goto yy10;
	}
yy12:
	++ctx->cursor;
#line 178 "hammer_map.y"
	{                     return s(yy::HammerFGDParser::make_OpeningRoundBracket); }
#line 289 "<stdout>"
yy14:
	++ctx->cursor;
#line 179 "hammer_map.y"
	{                     return s(yy::HammerFGDParser::make_ClosingRoundBracket); }
#line 294 "<stdout>"
yy16:
	yych = *++ctx->cursor;
	switch (yych) {
	case '-':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy16;
	default:	goto yy18;
	}
yy18:
#line 177 "hammer_map.y"
	{                     return s(yy::HammerFGDParser::make_Number, std::stol(std::string(anchor,ctx->cursor))); }
#line 314 "<stdout>"
yy19:
	yych = *++ctx->cursor;
	switch (yych) {
	case '/':	goto yy29;
	default:	goto yy2;
	}
yy20:
	yych = *++ctx->cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy32;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy20;
	default:	goto yy22;
	}
yy22:
#line 183 "hammer_map.y"
	{                     return s(yy::HammerFGDParser::make_Identifier, std::string(anchor, ctx->cursor)); }
#line 392 "<stdout>"
yy23:
	++ctx->cursor;
#line 180 "hammer_map.y"
	{                     return s(yy::HammerFGDParser::make_OpeningSquareBracket); }
#line 397 "<stdout>"
yy25:
	++ctx->cursor;
#line 181 "hammer_map.y"
	{                     return s(yy::HammerFGDParser::make_ClosingSquareBracket); }
#line 402 "<stdout>"
yy27:
	++ctx->cursor;
#line 182 "hammer_map.y"
	{                     return s(yy::HammerFGDParser::make_StringLiteral, std::string(anchor+1, ctx->cursor-1)); }
#line 407 "<stdout>"
yy29:
	yych = *++ctx->cursor;
	switch (yych) {
	case '\n':
	case '\r':	goto yy31;
	default:	goto yy29;
	}
yy31:
#line 185 "hammer_map.y"
	{                     return yylex(ctx); }
#line 418 "<stdout>"
yy32:
	yych = *++ctx->cursor;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy32;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy34;
	default:	goto yy22;
	}
yy34:
	yych = *++ctx->cursor;
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy34;
	default:	goto yy22;
	}
}
#line 187 "hammer_map.y"

		
}

void yy::HammerMapParser::error(const location_type& l,const std::string& m)
{
    Con_Printf("%s\n",m.c_str());
}






